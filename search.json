[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/006_How LLMs Help Us Write Poems/Poems_AI.html",
    "href": "posts/006_How LLMs Help Us Write Poems/Poems_AI.html",
    "title": "AI as a Creative Assistant: How LLMs Help Us Write Poems",
    "section": "",
    "text": "COMM4190 Blog Post\n\n\n\nimage.png\n\n\nClaim: LLMs make strong muses—not replacements. They accelerate metaphor-finding, style-shifting, and revision loops while humans steer feeling, taste, and truth.\n\n\n\n\nCompression: Big feelings in tiny spaces.\nMusic: Stress patterns, line breaks, sonic texture.\nSurprise: The mind-turn that cracks a window open.\n\nTension: LLMs can simulate surface music, but the pulse of necessity—the reason this line must exist—remains human work.\n\n# Pseudo-code: Brainstorm 12 fresh metaphors for \"loneliness\".\nprompt = \"\"\"\nGive me 12 non-cliché metaphors for 'loneliness'.\nRules:\n- Concrete images, no 'void', no 'empty room'.\n- Prefer tactile or audible scenes.\n- Each under 12 words.\n\"\"\"\nmetaphors = LLM.generate(prompt)\nprint(metaphors)\n\n\n\n\n\nA kettle singing to a kitchen with no chairs.\n\nFootsteps rehearsing for guests who do not arrive.\n\nA porch swing counting the evening without you.\n\nA lighthouse blinking to ships that changed their route.\n\nA violin tuned to a concert the hall forgot.\n\nA seed packet waiting past the rain.\n\n\n# Pseudo-code: Form play—request multiple versions of a theme.\nprompt = \"\"\"\nWrite three mini-poems (&lt;= 5 lines each) about the sea and memory:\n1) a haiku,\n2) free verse,\n3) a Shakespearean couplet.\nAvoid clichés; use fresh imagery.\n\"\"\"\nmini_poems = LLM.generate(prompt)\nprint(mini_poems)\n\n\n\n\n\nSpark: Ask for 10 openings; pick 1.\nExpand: Request 3 continuations in different tones.\nWeave: Stitch favorite lines; remove scaffolding.\nListen: Read aloud; cut until it breathes.\nGlaze: Subtle alliteration, consonance, or a motif (e.g., salt, brass, moth).\n\n\n“Draft with abundance, revise with mercy.”\n\n\n# Pseudo-code: Generate openings, then branch by tone.\nprompt_open = \"Give me 8 opening lines for a poem about time and salt.\"\nopens = LLM.generate(prompt_open)\n\nprompt_branch = f\"\"\"\nUsing this opening: \"{'{opens[0]}' if 'opens' in globals() else 'Time keeps its pockets full of salt.'}\",\ncontinue for 6-8 lines in three tones:\n- Lullaby\n- Documentary\n- Surreal\nLabel each version.\n\"\"\"\nbranches = LLM.generate(prompt_branch)\nprint(branches)\n\n\n\n\n\nLullaby: “Sleep, little harbor; the tide folds your name like linen.”\n\nDocumentary: “At 0400 the salinity rose; we logged it, hands stinging.”\n\nSurreal: “Clocks dissolved into brine; tongues learned the alphabet of foam.”\n\nTakeaway: LLMs are excellent at rapid tone-hopping → perfect for exploration.\n\n# Pseudo-code: Constraint engine—syllables and rhyme prompts (assist, not enforce).\nline = \"The moon keeps ledgers of uncounted debts.\"\nprompt = f\"\"\"\nRewrite this line in iambic pentameter (≈10 syllables, unstress/stress pattern).\nOffer 4 alternatives; optional slant rhyme with 'nets' or 'steps'.\nLine: {line}\n\"\"\"\nvariants = LLM.generate(prompt)\nprint(variants)\n\n\n\n\n\nCull ornaments: Remove lines that merely restate the image.\nSharpen verbs: Prefer “scalds” over “is hot,” “hoards” over “has.”\nTest breath: Read aloud; a stumble is a cut mark.\nMeaning pass: Ask: What changed from first to last line?\n\nMicro-ritual: Replace one noun with a material (brass, linen, loam) and one verb with a craft verb (braze, card, leach).\n\n# Pseudo-code: Human-in-the-loop polishing\nraw_poem = \"\"\"\nThe kettle hums to nobody.\nSalt creeps into the windowsill.\nI write your name in steam\nand watch the alphabet dry.\n\"\"\"\nprompt = f\"\"\"\nEdit this poem lightly:\n- Keep the core images.\n- Improve music (assonance/consonance).\n- Tighten the last line with a turn.\nText: {raw_poem}\n\"\"\"\nedit = LLM.generate(prompt)\nprint(edit)\n\n\n\n\nA model can hand you a thousand doors;\nonly you know which room you mean.\nIt offers echoes—salt, brass, moth—but you choose what sings.\nWhere the machine proposes, the poet disposes.\nWhere the model finishes a line, the human begins a life."
  },
  {
    "objectID": "posts/006_How LLMs Help Us Write Poems/Poems_AI.html#why-poetry-loves-tools-and-resists-automation",
    "href": "posts/006_How LLMs Help Us Write Poems/Poems_AI.html#why-poetry-loves-tools-and-resists-automation",
    "title": "AI as a Creative Assistant: How LLMs Help Us Write Poems",
    "section": "",
    "text": "Compression: Big feelings in tiny spaces.\nMusic: Stress patterns, line breaks, sonic texture.\nSurprise: The mind-turn that cracks a window open.\n\nTension: LLMs can simulate surface music, but the pulse of necessity—the reason this line must exist—remains human work.\n\n# Pseudo-code: Brainstorm 12 fresh metaphors for \"loneliness\".\nprompt = \"\"\"\nGive me 12 non-cliché metaphors for 'loneliness'.\nRules:\n- Concrete images, no 'void', no 'empty room'.\n- Prefer tactile or audible scenes.\n- Each under 12 words.\n\"\"\"\nmetaphors = LLM.generate(prompt)\nprint(metaphors)"
  },
  {
    "objectID": "posts/006_How LLMs Help Us Write Poems/Poems_AI.html#output-metaphor-orchard",
    "href": "posts/006_How LLMs Help Us Write Poems/Poems_AI.html#output-metaphor-orchard",
    "title": "AI as a Creative Assistant: How LLMs Help Us Write Poems",
    "section": "",
    "text": "A kettle singing to a kitchen with no chairs.\n\nFootsteps rehearsing for guests who do not arrive.\n\nA porch swing counting the evening without you.\n\nA lighthouse blinking to ships that changed their route.\n\nA violin tuned to a concert the hall forgot.\n\nA seed packet waiting past the rain.\n\n\n# Pseudo-code: Form play—request multiple versions of a theme.\nprompt = \"\"\"\nWrite three mini-poems (&lt;= 5 lines each) about the sea and memory:\n1) a haiku,\n2) free verse,\n3) a Shakespearean couplet.\nAvoid clichés; use fresh imagery.\n\"\"\"\nmini_poems = LLM.generate(prompt)\nprint(mini_poems)"
  },
  {
    "objectID": "posts/006_How LLMs Help Us Write Poems/Poems_AI.html#co-writing-protocol",
    "href": "posts/006_How LLMs Help Us Write Poems/Poems_AI.html#co-writing-protocol",
    "title": "AI as a Creative Assistant: How LLMs Help Us Write Poems",
    "section": "",
    "text": "Spark: Ask for 10 openings; pick 1.\nExpand: Request 3 continuations in different tones.\nWeave: Stitch favorite lines; remove scaffolding.\nListen: Read aloud; cut until it breathes.\nGlaze: Subtle alliteration, consonance, or a motif (e.g., salt, brass, moth).\n\n\n“Draft with abundance, revise with mercy.”\n\n\n# Pseudo-code: Generate openings, then branch by tone.\nprompt_open = \"Give me 8 opening lines for a poem about time and salt.\"\nopens = LLM.generate(prompt_open)\n\nprompt_branch = f\"\"\"\nUsing this opening: \"{'{opens[0]}' if 'opens' in globals() else 'Time keeps its pockets full of salt.'}\",\ncontinue for 6-8 lines in three tones:\n- Lullaby\n- Documentary\n- Surreal\nLabel each version.\n\"\"\"\nbranches = LLM.generate(prompt_branch)\nprint(branches)"
  },
  {
    "objectID": "posts/006_How LLMs Help Us Write Poems/Poems_AI.html#tone-shifts-imagined-snippets",
    "href": "posts/006_How LLMs Help Us Write Poems/Poems_AI.html#tone-shifts-imagined-snippets",
    "title": "AI as a Creative Assistant: How LLMs Help Us Write Poems",
    "section": "",
    "text": "Lullaby: “Sleep, little harbor; the tide folds your name like linen.”\n\nDocumentary: “At 0400 the salinity rose; we logged it, hands stinging.”\n\nSurreal: “Clocks dissolved into brine; tongues learned the alphabet of foam.”\n\nTakeaway: LLMs are excellent at rapid tone-hopping → perfect for exploration.\n\n# Pseudo-code: Constraint engine—syllables and rhyme prompts (assist, not enforce).\nline = \"The moon keeps ledgers of uncounted debts.\"\nprompt = f\"\"\"\nRewrite this line in iambic pentameter (≈10 syllables, unstress/stress pattern).\nOffer 4 alternatives; optional slant rhyme with 'nets' or 'steps'.\nLine: {line}\n\"\"\"\nvariants = LLM.generate(prompt)\nprint(variants)"
  },
  {
    "objectID": "posts/006_How LLMs Help Us Write Poems/Poems_AI.html#editing-from-plenty-to-precision",
    "href": "posts/006_How LLMs Help Us Write Poems/Poems_AI.html#editing-from-plenty-to-precision",
    "title": "AI as a Creative Assistant: How LLMs Help Us Write Poems",
    "section": "",
    "text": "Cull ornaments: Remove lines that merely restate the image.\nSharpen verbs: Prefer “scalds” over “is hot,” “hoards” over “has.”\nTest breath: Read aloud; a stumble is a cut mark.\nMeaning pass: Ask: What changed from first to last line?\n\nMicro-ritual: Replace one noun with a material (brass, linen, loam) and one verb with a craft verb (braze, card, leach).\n\n# Pseudo-code: Human-in-the-loop polishing\nraw_poem = \"\"\"\nThe kettle hums to nobody.\nSalt creeps into the windowsill.\nI write your name in steam\nand watch the alphabet dry.\n\"\"\"\nprompt = f\"\"\"\nEdit this poem lightly:\n- Keep the core images.\n- Improve music (assonance/consonance).\n- Tighten the last line with a turn.\nText: {raw_poem}\n\"\"\"\nedit = LLM.generate(prompt)\nprint(edit)"
  },
  {
    "objectID": "posts/006_How LLMs Help Us Write Poems/Poems_AI.html#coda-the-muse-that-returns-the-question",
    "href": "posts/006_How LLMs Help Us Write Poems/Poems_AI.html#coda-the-muse-that-returns-the-question",
    "title": "AI as a Creative Assistant: How LLMs Help Us Write Poems",
    "section": "",
    "text": "A model can hand you a thousand doors;\nonly you know which room you mean.\nIt offers echoes—salt, brass, moth—but you choose what sings.\nWhere the machine proposes, the poet disposes.\nWhere the model finishes a line, the human begins a life."
  },
  {
    "objectID": "posts/000_test_post/index.html",
    "href": "posts/000_test_post/index.html",
    "title": "A test post",
    "section": "",
    "text": "Read the following and see if you can answer the question:\n\n\nThere are three boxes in a stack. A pink one, a purple one and a green one. The pink one is in the middle of the stack with the purple below it. What is the color of the box on the bottom of the stack?\n\nMost likely you answered purple…\nBut it is possible you first said green (don’t worry if you did it is quite a common response!)\n\n\nIt’s a verbal visual problem that requires some deliberation and most likely for us to create a visual image of a stack of boxes as a reasoning aid.\nNotice also the complexity of the language used in the prompt to describe the scene. The use of natural language as opposed to a formal/logical calculus does hold the potential for ambiguity (multiple interpretations) and inexactness. However, it is the most normal/natural, efficient and broadly accessible way of communicating such information.\nNotice 1. The use of anaphor or reference. - Three BOXES -&gt; a pink/purple/green ONE as opposed to a pink box, a purple box and a green box. - The PINK ONE is in the middle ... the purple {BOX} below IT {the pink box}\nWe tend to try and avoid this kind of repetition to make our speech more coherent.\n\nAlthough the description in language may not be entirely concise, there is no real ambiguity as to how the boxes can be arranged. It must be: | Box | Stack position | | — | — | | GREEN | top | | PINK | middle | | PURPLE | bottom |\n\n\n\n\nGPT3.5 Turbo\n\nHad some difficulties and answered green\nLlama2 (chat 7B version)\n\n\nAnswered correctly (purple) and used some so-called chain-of-thought reasoning\n\nBing Chat (MS Co-pilot)\nThis LLM is GPT4 with some Microsoft specific tuning and RAG (search) additions.\nIt get’s it correct:\n\nThe color of the box on the bottom of the stack is purple. This is because the purple box is below the pink one, which is in the middle of the stack. Therefore, the purple box must be the lowest one. 🟪\n\nBut when you follow up and ask it to create visual representation of the box arrangement\n\nPROMPT: Can you create a visual representation of how the boxes are arranged?\n\nIt responds\n\nRESPONSE: Sure, I’ll try to create that. Here is a visual representation of how the boxes are arranged:\n\nAnd uses DALL-E3 to create 4 different attempts at a visual representation:\n\nNONE OF WHICH ARE CORRECT!!!"
  },
  {
    "objectID": "posts/000_test_post/index.html#a-visualization-problem-for-llms",
    "href": "posts/000_test_post/index.html#a-visualization-problem-for-llms",
    "title": "A test post",
    "section": "",
    "text": "Read the following and see if you can answer the question:\n\n\nThere are three boxes in a stack. A pink one, a purple one and a green one. The pink one is in the middle of the stack with the purple below it. What is the color of the box on the bottom of the stack?\n\nMost likely you answered purple…\nBut it is possible you first said green (don’t worry if you did it is quite a common response!)\n\n\nIt’s a verbal visual problem that requires some deliberation and most likely for us to create a visual image of a stack of boxes as a reasoning aid.\nNotice also the complexity of the language used in the prompt to describe the scene. The use of natural language as opposed to a formal/logical calculus does hold the potential for ambiguity (multiple interpretations) and inexactness. However, it is the most normal/natural, efficient and broadly accessible way of communicating such information.\nNotice 1. The use of anaphor or reference. - Three BOXES -&gt; a pink/purple/green ONE as opposed to a pink box, a purple box and a green box. - The PINK ONE is in the middle ... the purple {BOX} below IT {the pink box}\nWe tend to try and avoid this kind of repetition to make our speech more coherent.\n\nAlthough the description in language may not be entirely concise, there is no real ambiguity as to how the boxes can be arranged. It must be: | Box | Stack position | | — | — | | GREEN | top | | PINK | middle | | PURPLE | bottom |\n\n\n\n\nGPT3.5 Turbo\n\nHad some difficulties and answered green\nLlama2 (chat 7B version)\n\n\nAnswered correctly (purple) and used some so-called chain-of-thought reasoning\n\nBing Chat (MS Co-pilot)\nThis LLM is GPT4 with some Microsoft specific tuning and RAG (search) additions.\nIt get’s it correct:\n\nThe color of the box on the bottom of the stack is purple. This is because the purple box is below the pink one, which is in the middle of the stack. Therefore, the purple box must be the lowest one. 🟪\n\nBut when you follow up and ask it to create visual representation of the box arrangement\n\nPROMPT: Can you create a visual representation of how the boxes are arranged?\n\nIt responds\n\nRESPONSE: Sure, I’ll try to create that. Here is a visual representation of how the boxes are arranged:\n\nAnd uses DALL-E3 to create 4 different attempts at a visual representation:\n\nNONE OF WHICH ARE CORRECT!!!"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "My Explorations with LLMs",
    "section": "",
    "text": "AI as a Creative Assistant: How LLMs Help Us Write Poems\n\n\n\nLLMs & Creativity\n\nPoetry\n\nAI Writing\n\nCollaboration\n\n\n\nA practical, lyrical tour of how LLMs collaborate in poetry—metaphor brainstorming, tone-shifting, form play, and gentle revision—while keeping the human at the helm.\n\n\n\n\n\nSep 18, 2025\n\n\nInigo\n\n\n\n\n\n\n\n\n\n\n\n\nA test post\n\n\n\nLLMs\n\nprompting\n\nlogic\n\n\n\nAn example post from a Jupyter notebook\n\n\n\n\n\nFeb 2, 2024\n\n\nAn LLM User\n\n\n\n\n\nNo matching items"
  }
]